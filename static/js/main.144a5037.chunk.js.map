{"version":3,"sources":["components/App/App.module.scss","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","useState","preview","setPreview","upload","e","console","log","target","files","length","url","window","URL","createObjectURL","image","Image","src","onload","revokeObjectURL","className","styles","app","camera","id","type","accept","onChange","htmlFor","multiple","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,QAAU,uB,yJCkDjEC,MAhDf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,KAGPC,EAAS,SAACC,GACdC,QAAQC,IAAIF,EAAEG,OAAOC,OAD8B,IAE3CA,EAAUJ,EAAEG,OAAZC,MAER,GAAIA,GAASA,EAAMC,OAAS,EAAG,CAC7B,IAAMC,EAAMC,OAAOC,IAAIC,gBAAgBL,EAAM,IACvCM,EAAQ,IAAIC,MAClBD,EAAME,IAAMN,EACZI,EAAMG,OAAS,WACbf,EAAWY,EAAME,KACjBL,OAAOC,IAAIM,gBAAgBJ,EAAME,QAKvC,OACE,yBAAKG,UAAWC,IAAOC,KACrB,yBAAKF,UAAWC,IAAOE,QACrB,2BACEC,GAAG,aACHC,KAAK,OACLC,OAAO,yBACPC,SAAUvB,IAEZ,2BAAOwB,QAAQ,cAAf,eAGF,yBAAKR,UAAWC,IAAOE,QACrB,2BACEC,GAAG,SACHC,KAAK,OACLC,OAAO,mCACPG,UAAU,EACVF,SAAUvB,IAEZ,2BAAOwB,QAAQ,UAAf,iBAGD1B,GACC,yBAAKkB,UAAWC,IAAOnB,QAASe,IAAKf,EAAS4B,IAAI,cCjCpDC,EAAcC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B3C,QAAQC,IACN,iHAKE+B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBrC,QAAQC,IAAI,sCAGR+B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL/C,QAAQ+C,MAAM,4CAA6CA,M,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAI1B,IACpB8C,sBACA/C,OAAOqB,SAAS2B,MAEJC,SAAWjD,OAAOqB,SAAS4B,OAIvC,OAGFjD,OAAOkD,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,sBAAN,sBAEP5B,IAgEV,SAAiCM,EAAeC,GAE9CyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7B9B,OAAOqB,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL9C,QAAQC,IACN,oEAvFAkE,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCpC,QAAQC,IACN,iHAMJ6B,EAAgBC,EAAOC,OC7C/BE,K","file":"static/js/main.144a5037.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3BT4Y\",\"camera\":\"App_camera__2sc-G\",\"preview\":\"App_preview__17wQv\"};","import React, { ChangeEvent, useState } from 'react';\nimport styles from './App.module.scss';\n\nfunction App() {\n  const [preview, setPreview] = useState('');\n\n  const upload = (e: ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.files);\n    const { files } = e.target;\n\n    if (files && files.length > 0) {\n      const url = window.URL.createObjectURL(files[0]);\n      const image = new Image();\n      image.src = url;\n      image.onload = () => {\n        setPreview(image.src);\n        window.URL.revokeObjectURL(image.src);\n      };\n    }\n  };\n\n  return (\n    <div className={styles.app}>\n      <div className={styles.camera}>\n        <input\n          id=\"take-photo\"\n          type=\"file\"\n          accept=\"image/*;capture=camera\"\n          onChange={upload}\n        />\n        <label htmlFor=\"take-photo\">Take Photo</label>\n      </div>\n\n      <div className={styles.camera}>\n        <input\n          id=\"upload\"\n          type=\"file\"\n          accept=\"image/x-png,image/jpeg,image/gif\"\n          multiple={false}\n          onChange={upload}\n        />\n        <label htmlFor=\"upload\">Upload Photo</label>\n      </div>\n\n      {preview && (\n        <img className={styles.preview} src={preview} alt=\"preview\" />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/reset.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}